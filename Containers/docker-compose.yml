version: '3.8'

services:
  mongo1: #Creates the primary node for replica set
    image: mongo
    container_name: mongo1
    command: ["mongod", "--replSet", "myReplicaSet", "--bind_ip", "0.0.0.0"]
    ports:
      - "27018:27017"
    networks:
      - mongoCluster
    volumes:
      - ./data/mongo1:/data/db  # Persist MongoDB data for mongo1
    restart: always
    init: true  # This will be used to mark if this container should run init scripts

  mongo2: #Creates a secondary node for replica set
    image: mongo
    container_name: mongo2
    command: ["mongod", "--replSet", "myReplicaSet", "--bind_ip", "0.0.0.0"]
    ports:
      - "27019:27017"
    networks:
      - mongoCluster
    volumes:
      - ./data/mongo2:/data/db  # Persist MongoDB data for mongo2
    restart: always

  mongo3: #Creates a secondary node for replica set
    image: mongo
    container_name: mongo3
    command: ["mongod", "--replSet", "myReplicaSet", "--bind_ip", "0.0.0.0"]
    ports:
      - "27020:27017"
    networks:
      - mongoCluster
    volumes:
      - ./data/mongo3:/data/db  # Persist MongoDB data for mongo3
    restart: always


  mongo-init: # Replica Set Initialization Service
    image: mongo
    container_name: mongo-init
    command: ["sh", "-c", "sleep 10 && mongosh --host mongo1 --eval 'rs.initiate({ _id: \"myReplicaSet\", members: [ { _id: 0, host: \"mongo1\" }, { _id: 1, host: \"mongo2\" }, { _id: 2, host: \"mongo3\" } ] })'"]
    networks:
      - mongoCluster
    restart: "no"

networks:
  mongoCluster:
    driver: bridge
